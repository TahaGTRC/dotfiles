diff --git a/x.c b/x.c
index c343ba2..4b2fc7b 100644
--- a/x.c
+++ b/x.c
@@ -56,6 +56,7 @@ static void selpaste(const Arg *);
 static void zoom(const Arg *);
 static void zoomabs(const Arg *);
 static void zoomreset(const Arg *);
+static void setpalette(const Arg *);
 
 /* config.h for applying patches and the configuration. */
 #include "config.h"
@@ -703,24 +704,7 @@ sixd_to_16bit(int x)
 int
 xloadcolor(int i, const char *name, Color *ncolor)
 {
-	XRenderColor color = { .alpha = 0xffff };
-
-	if (!name) {
-		if (BETWEEN(i, 16, 255)) { /* 256 color */
-			if (i < 6*6*6+16) { /* same colors as xterm */
-				color.red   = sixd_to_16bit( ((i-16)/36)%6 );
-				color.green = sixd_to_16bit( ((i-16)/6) %6 );
-				color.blue  = sixd_to_16bit( ((i-16)/1) %6 );
-			} else { /* greyscale */
-				color.red = 0x0808 + 0x0a0a * (i - (6*6*6+16));
-				color.green = color.blue = color.red;
-			}
-			return XftColorAllocValue(xw.dpy, xw.vis,
-			                          xw.cmap, &color, ncolor);
-		} else
-			name = colorname[i];
-	}
-
+	if (!name)  name = colorname[i];
 	return XftColorAllocName(xw.dpy, xw.vis, xw.cmap, name, ncolor);
 }
 
@@ -731,7 +715,7 @@ xloadcols(void)
 	static int loaded;
 	Color *cp;
 
-	dc.collen = MAX(LEN(colorname), 256);
+	dc.collen = 16;
 	dc.col = xmalloc(dc.collen * sizeof(Color));
 
 	if (loaded) {
@@ -1725,6 +1709,7 @@ kpress(XEvent *ev)
 			len = 2;
 		}
 	}
+	
 	ttywrite(buf, len, 1);
 }
 
@@ -1880,6 +1865,15 @@ usage(void)
 	    " [stty_args ...]\n", argv0, argv0);
 }
 
+void setpalette(const Arg *arg) {
+
+    if ( arg->i < LEN(palettes) )   {
+        colorname = palettes[arg->i];
+        xloadcols();
+        cresize(win.w, win.h);
+    }
+}
+
 int
 main(int argc, char *argv[])
 {
@@ -1932,6 +1926,8 @@ main(int argc, char *argv[])
 	} ARGEND;
 
 run:
+    colorname = palettes[0];
+
 	if (argc > 0) /* eat all remaining arguments */
 		opt_cmd = argv;
 
@@ -1950,3 +1946,4 @@ run:
 
 	return 0;
 }
+
